// Mocks generated by Mockito 5.0.7 from annotations
// in multiverse/test/view_model/dining_model_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:multiverse/dining_repository.dart' as _i3;
import 'package:multiverse/menu.dart' as _i2;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

// ignore_for_file: prefer_const_constructors

// ignore_for_file: avoid_redundant_argument_values

class _FakeFullDayMenu extends _i1.Fake implements _i2.FullDayMenu {}

/// A class which mocks [DiningRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDiningRepository extends _i1.Mock implements _i3.DiningRepository {
  MockDiningRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.FullDayMenu> getMenu(DateTime? date) =>
      (super.noSuchMethod(Invocation.method(#getMenu, [date]),
              returnValue: Future<_i2.FullDayMenu>.value(_FakeFullDayMenu()))
          as _i4.Future<_i2.FullDayMenu>);
  @override
  _i4.Future<int> getBreakfastCreditCount() =>
      (super.noSuchMethod(Invocation.method(#getBreakfastCreditCount, []),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> getDinnerCreditCount() =>
      (super.noSuchMethod(Invocation.method(#getDinnerCreditCount, []),
          returnValue: Future<int>.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<_i2.MealType> getCurrentMealType() =>
      (super.noSuchMethod(Invocation.method(#getCurrentMealType, []),
              returnValue: Future<_i2.MealType>.value(_i2.MealType.breakfast))
          as _i4.Future<_i2.MealType>);
  @override
  _i4.Future<String> getMealLocation() =>
      (super.noSuchMethod(Invocation.method(#getMealLocation, []),
          returnValue: Future<String>.value('')) as _i4.Future<String>);
}
